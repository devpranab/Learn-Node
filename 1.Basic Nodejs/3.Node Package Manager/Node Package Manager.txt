Node Package Manager

1 Initializing Node Package
- when installed node with installed npm command tool.
- $ npm init (npmjs.com) or npm init -y or npm -v - Define as project folder to Node Package Manager.

2 Installing Packages and Package Dependencies
- $ npm install bootstrap or npm i bootstrap

3 Using Packages
- Use npm packagh to follow npm document.

4 Semantic Versioning 
- $ npm list
- Versioning of packagh. 
- "react": "^17.0.1" 
- (3 part = major.minor.patch) = Semantic Versioning 
- major - bug fixing - 1.0.0 = 2.0.0
- minor verson - add features - 1.0.0 = 1.1.0
- patch update - bug fixing - 1.0.0 = 1.0.1
- ^ leteast minor verson wala (16.x)
- ~ leteast patch verson wala (16.1.x)

5 DevDependencies and Global Packages
- DevDependencies Packages:
- Global Packages:

6 Updating and Uninstalling Packages
- npm i babel -d
- npm i babel -g
- npm i nodemon -g
- npm root //path of packages
- npm root -g

7 Publishing Packages
- npm outdated //show outdated packages
- npm outdated -g //show outdated global packages
- npm updated //updated packages
- npm uninstall bootstrap or npm un bootstrap

- Publishing our packages at npmjs.com > 
- npm init -y
```js
const area = r => 3.14 * r * r;

module.exports.area = area;
```
- npm adduser //create npm account -set Username, Password
- npm login
- package name should be unique.
- npm publish
- npm search bohubrihi
- for update bohubrihi can edit in package.json or //update our package(before edit code)
- npm verson major/minor/patch
- npm publish